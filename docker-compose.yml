version: '3'

services:
  mysqldb:
    image: mysql:5.7
    container_name: mysql_container
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: cocomecha_db
      MYSQL_USER: docker
      MYSQL_PASSWORD: docker
      TZ: 'Asia/Tokyo'
    volumes:
      - ./docker/db/data:/var/lib/mysql
      - ./docker/db/my.cnf:/etc/mysql/conf.d/my.cnf
      - ./docker/db/sql:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"
    expose:
      - "3307"
    command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci


  spring:
    container_name: spring-app  # コンテナ名（Docker Desktop上はこの名前で表示される）
    build: ./docker/spring      # Dockerfileを含むディレクトリへのパス
    # depends_on:
    #   - flyway-migration        # マイグレーションが完了した後に起動させる
    depends_on:
      - mysqldb  # MySQLコンテナが起動した後に起動させる
    ports:
      - "8080:8080"             # ポートマッピング
    volumes:
      - .:/app                  # ボリュームマッピング
    environment:
      # MySQLの接続設定
      spring.datasource.driverClassName: "com.mysql.cj.jdbc.Driver"
      spring.datasource.url:  jdbc:mysql://localhost:3306/cocomecha_db  # host:port部分はコンテナ名を指定する
      spring.datasource.username: "root"
      spring.datasource.password: "root"
    working_dir: /app # 作業ディレクトリ
    # jarから起動
    command: sh -c "java -jar ./build/libs/cocomecha_api-0.0.1-SNAPSHOT.jar"

# DBの永続化先
volumes:
  mysql_db:
    driver: local


# version: "3"
# services:
#   dbserver:
#     container_name: mysql5.7-spring
#     image: mysql:5.7
#     environment:
#       MYSQL_DATABASE: kotlin_restapi_db
#       MYSQL_USER: user
#       MYSQL_PASSWORD: password
#       MYSQL_ROOT_PASSWORD: rootpassword
#     expose:
#       - 3306
#     ports:
#       - 3306:3306
#     volumes:
#       # 起動スクリプト
#       - ./docker/mysql/initdb:/docker-entrypoint-initdb.d
#       # MySQLの設定ファイル
#       - ./docker/mysql/config:/etc/mysql/conf.d
#       # DBの永続化
#       - mysql_db:/var/lib/mysql
#   spring:
#     container_name: backend-spring-app
#     build: ./docker/spring
#     depends_on:
#       # dbserverが起動してから、appを起動
#       - dbserver
#     ports:
#       - "8081:8081"
#     volumes:
#       - ./backend:/app
#     environment:
#       # mysqlの接続設定 host:portはコンテナ名指定
#       spring.datasource.driverClassName: "com.mysql.cj.jdbc.Driver"
#       spring.datasource.url: "jdbc:mysql://dbserver/kotlin_restapi_db"
#       spring.datasource.username: "user"
#       spring.datasource.password: "password"
#     working_dir: /app
#     tty: true
#     command: sh -c "gradle build -x test && java -jar -Dspring.profiles.active=docker-compose ./build/libs/kotlin_restapi-0.0.1-SNAPSHOT.jar"
#   vue:
#     build: ./docker/vue
#     container_name: front-vue-app
#     depends_on:
#       - spring
#     ports:
#       - "8888:8888"
#     volumes:
#       - ./frontend:/app
#     working_dir: /app
#     tty: true
#     command: sh -c "npm install && npm run serve"
#   nginx:
#     image: nginx
#     container_name: front-nginx
#     depends_on:
#       - vue
#     ports:
#       - 80:80
#     environment:
#       - TZ=Asia/Tokyo
#     volumes:
#       - ./nginx/nginx.conf:/etc/nginx/nginx.conf
# # DBの永続化先
# volumes:
#   mysql_db:
#     driver: local






# version: "3.7"
  # dbserver:
    # container_name: mysql-db  # コンテナ名（Docker Desktop上はこの名前で表示される）
    # build:
    #   context: ./docker/mysql # Dockerfileを含むディレクトリへのパス
    #   dockerfile: Dockerfile  # Dockerfile名
    # image: mysql:latest # イメージ名
    # environment:
    #   MYSQL_ROOT_PASSWORD: root # 環境変数（rootユーザのパスワード）
    #   MYSQL_USER: root      # 環境変数（ユーザ）
    #   MYSQL_PASSWORD: root  # 環境変数（パスワード）
    #   MYSQL_DATABASE: sampledb     # 環境変数（データベース名）
    # restart: always # 再起動ポリシー
    # command: --default-authentication-plugin=mysql_native_password  # mysql_native_password を使用したネイティブ認証
    # ports:
    #   - "3307:3307" # ポートマッピング
    # volumes:
    #   - ./docker/mysql/conf.d:/etc/mysql/conf.d # mysql.confディレクトリのマッピング
    #   - ./docker/log/mysql:/var/log/mysql       # mysqld.logディレクトリのマッピング
    #   - mysql_db:/var/lib/mysql                 # データ永続化ボリュームのマッピング
  # dbserver:
  #   container_name: mysql-db  # コンテナ名（Docker Desktop上はこの名前で表示される）
  #   build:
  #     context: ./docker/mysql # Dockerfileを含むディレクトリへのパス
  #     dockerfile: Dockerfile  # Dockerfile名
  #   image: chig1215/mysql:latest # イメージ名
  #   environment:
  #     MYSQL_ROOT_PASSWORD: root # 環境変数（rootユーザのパスワード）
  #     MYSQL_USER: chig1215      # 環境変数（ユーザ）
  #     MYSQL_PASSWORD: chig1215  # 環境変数（パスワード）
  #     MYSQL_DATABASE: kinto     # 環境変数（データベース名）
  #   restart: always # 再起動ポリシー
  #   command: --default-authentication-plugin=mysql_native_password  # mysql_native_password を使用したネイティブ認証
  #   ports:
  #     - "3306:3306" # ポートマッピング
  #   volumes:
  #     - ./docker/mysql/conf.d:/etc/mysql/conf.d # mysql.confディレクトリのマッピング
  #     - ./docker/log/mysql:/var/log/mysql       # mysqld.logディレクトリのマッピング
  #     - mysql_db:/var/lib/mysql                 # データ永続化ボリュームのマッピング

  # flyway-repair:
  #   container_name: flyway-repair # コンテナ名（Docker Desktop上はこの名前で表示される）
  #   image: flyway/flyway          # イメージ名
  #   command: repair               # 前回のSQLエラー解消（サンプルコンテンツのため。本番稼働アプリでは不要）
  #   volumes:
  #     - ./docker/flyway/conf:/flyway/conf # flyway.confディレクトリのマッピング
  #   depends_on:
  #     - dbserver  # MySQLコンテナが起動した後に起動させる

  # flyway-migration:
  #   container_name: flyway-migration  # コンテナ名（Docker Desktop上はこの名前で表示される）
  #   image: flyway/flyway              # イメージ名
  #   # MySQLの接続先を指定してマイグレーションを実行する（host:port部分はコンテナ名を指定する）
  #   command: -url=jdbc:mysql://dbserver -schemas=kinto -user=chig1215 -password=chig1215 -connectRetries=60 migrate
  #   volumes:
  #     - ./docker/flyway/conf:/flyway/conf # flyway.confディレクトリのマッピング
  #     - ./docker/flyway/sql:/flyway/sql   # マイグレーションSQLファイルディレクトリのマッピング
  #   depends_on:
  #     - flyway-repair # repairが完了した後に起動させる


  # spring:
  #   container_name: spring-app  # コンテナ名（Docker Desktop上はこの名前で表示される）
  #   build: ./docker/spring      # Dockerfileを含むディレクトリへのパス
  #   # depends_on:
  #   #   - flyway-migration        # マイグレーションが完了した後に起動させる
  #   # depends_on:
  #   #   - dbserver  # MySQLコンテナが起動した後に起動させる
  #   ports:
  #     - "8080:8080"             # ポートマッピング
  #   volumes:
  #     - .:/app                  # ボリュームマッピング
  #   # environment:
  #   #   # MySQLの接続設定
  #   #   spring.datasource.driverClassName: "com.mysql.cj.jdbc.Driver"
  #   #   spring.datasource.url:  jdbc:mysql://localhost:3306/sampledb  # host:port部分はコンテナ名を指定する
  #   #   spring.datasource.username: "root"
  #   #   spring.datasource.password: "root"
  #   working_dir: /app # 作業ディレクトリ
  #   # jarから起動
  #   command: sh -c "java -jar ./build/libs/cocomecha_api-0.0.1-SNAPSHOT.jar"

# # DBの永続化先
# volumes:
#   mysql_db:
#     driver: local
